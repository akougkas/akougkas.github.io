@INPROCEEDINGS{he2015heterogeneity,
  abbr={icpp15},
  author={He, Shuibing and Sun, Xian-He and Wang, Yang and Kougkas, Anthony and Haider, Adnan},
  abstract={Parallel file systems (PFS) are commonly used in high-end computing systems. With the emergence of solid state drives (SSD), hybrid PFSs, which consist of both HDD and SSD servers, provide a practical I/O system solution for data-intensive applications. However, most existing PFS layout schemes are inefficient for hybrid PFSs due to their lack of awareness of the performance differences between heterogeneous servers and the workload changes between different parts of a file. This lack of recognition can result in severe I/O performance degradation. In this study, we propose a heterogeneity-aware region-level (HARL) data layout scheme to improve the data distribution of a hybrid PFS. HARL first divides a file into fine-grained, varying sized regions according to the changes of an application's I/O workload, then chooses appropriate file stripe sizes on heterogeneous servers based on the server performance for each file region. Experimental results of representative benchmarks show that HARL can greatly improve the I/O system performance.},
  booktitle={ICPP'15: Proceedings of the 44th International Conference on Parallel Processing},
  title={A Heterogeneity-Aware Region-Level Data Layout for Hybrid Parallel File Systems},
  year={2015},
  month={December},
  publisher={},
  volume={},
  number={},
  pages={340-349},
  keywords={Servers;Layout;File systems;Benchmark testing;System performance;Computers;Solids;Parallel I/O System;Parallel File system;Solid State Drive;Data Layout},
  doi={10.1109/ICPP.2015.43},
  url={https://ieeexplore.ieee.org/abstract/document/7349589},
  html={https://ieeexplore.ieee.org/abstract/document/7349589},
  pdf={hadl.pdf},
  google_scholar_id={UeHWp8X0CEIC},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{eslami2015efficient,
  abbr={discs15},
  author={Eslami, Hassan and Kougkas, Anthony and Kotsifakou, Maria and Kasampalis, Theodoros and Feng, Kun and Lu, Yin and Gropp
, William and Sun, Xian-He and Chen, Yong and Thakur, Rajeev},
  abstract={Many applications foreseen for exascale era should process huge amount of data. However, the IO infrastructure of current supercomputing architecture cannot be generalized to deal with this amount of data due to the need for excessive data movement from storage layers to compute nodes leading to limited scalability. There has been extensive studies addressing this challenge. Decoupled Execution Paradigm (DEP) is an attractive solution due to its unique features such as available fast storage devices close to computational units and available programmable units close to file system. In this paper we study the effectiveness of DEP for a well-known data-intensive kernel, disk-to-disk (aka out-of-core) sorting. We propose an optimized algorithm that uses almost all features of DEP pushing the performance of sorting in HPC even further compared to other existing solutions. Advantages in our algorithm are gained by exploiting programming units close to parallel file system to achieve higher IO throughput, compressing data before sending it over network or to disk, storing intermediate results of computation close to compute nodes, and fully overlapping IO with computation. We also provide an analytical model for our proposed algorithm. Our algorithm achieves 30% better performance compared to the theoretically optimal sorting algorithm running on the same testbed but not designed to exploit the DEP architecture.},
  booktitle={DISCS'15: Proceedings of the International Workshop on Data-Intensive Scalable Computing},
  title={Efficient disk-to-disk sorting: a case study in the decoupled execution paradigm},
  year={2015},
  month={November},
  publisher={ACM},
  volume={},
  number={2},
  pages={1--8},
  keywords={},
  doi={10.1145/2831244.2831249},
  url={https://dl.acm.org/doi/abs/10.1145/2831244.2831249},
  html={https://dl.acm.org/doi/abs/10.1145/2831244.2831249},
  pdf={d2dsort.pdf},
  google_scholar_id={IjCSPb-OGe4C},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{bbio,
  abbr={escience16},
  author={Kougkas, Anthony and Dorier, Matthieu and Latham, Rob and Ross, Rob and Sun, Xian-He},
  abstract={Concurrent accesses to the shared storage resources in current HPC machines lead to severe performance degradation caused by I/O contention. In this study, we identify some key challenges to efficiently handling interleaved data accesses, and we propose a system-wide solution to optimize global performance. We implemented and tested several I/O scheduling policies, including prioritizing specific applications by leveraging burst buffers to defer the conflicting accesses from another application and/or directing the requests to different storage servers inside the parallel file system infrastructure. The results show that we mitigate the negative effects of interference and optimize the performance up to 2x depending on the selected I/O policy.},
  booktitle={eScience'16: Proceedings of the 12th International Conference on e-Science}, 
  title={Leveraging burst buffer coordination to prevent I/O interference}, 
  year={2016},
  month={June},
  publisher={IEEE},
  volume={},
  number={},
  pages={371-380},
  keywords={I/O Interference;Parallel File Systems;I/O Policies;I/O Staging;Burst Buffers},
  doi={10.1109/eScience.2016.7870922},
  url={https://ieeexplore.ieee.org/document/7870922},
  html={https://ieeexplore.ieee.org/document/7870922},
  pdf={bbio.pdf},
  google_scholar_id={W7OEmFMy1HYC},
  additional_info={},
  bibtex_show={true},
  selected={true}
}

@INPROCEEDINGS{kougkas2016towards,
  abbr={pdsw16},
  author={Kougkas, Anthony and Fleck, Anthony and Sun, Xian-He},
  abstract={An Open Ethernet Drive (OED) is a new technology that encloses into a hard drive (HDD or SSD) a low-power processor, a fixed-size memory and an Ethernet card. In this study, we thoroughly evaluate the performance of such device and the energy requirements to operate it. The results show that first it is a viable solution to offload data-intensive computations on the OED while maintaining a reasonable performance, and second, the energy consumption savings from utilizing such technology are significant as it only consumes 10% of the power needed by a normal server node. We propose that by using OED devices as storage servers in HPC, we can run a reliable, scalable, cost and energy efficient storage solution.},
  booktitle={PDSW-DISCS16: Proceedings of the 1st Joint International Workshop On Parallel Data Storage & Data Intensive Scalable Computing Systems},
  title={Towards energy efficient data management in HPC: the open ethernet drive approach},
  year={2016},
  month={November},
  publisher={IEEE},
  volume={},
  number={},
  pages={43-48},
  keywords={Servers;Computer architecture;Random access memory;Benchmark testing;Performance evaluation;Energy consumption;Hardware;Open Ethernet Drives;Data Management;Data-Intensive Computing;Energy Efficiency;Benchmarking;Performance Evaluation},
  doi={10.1109/PDSW-DISCS.2016.012},
  url={https://ieeexplore.ieee.org/abstract/document/7836567},
  html={https://ieeexplore.ieee.org/abstract/document/7836567},
  pdf={oed.pdf},
  google_scholar_id={YsMSGLbcyi4C},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{kougkas2017rethinking,
  abbr={ijhpca17},
  author={Kougkas, Anthony and Eslami, Hassan and Sun, Xian-He and Thakur, Rajeev and Gropp, William},
  abstract={Key–value stores are being widely used as the storage system for large-scale internet services and cloud storage systems. However, they are rarely used in HPC systems, where parallel file systems are the dominant storage solution. In this study, we examine the architecture differences and performance characteristics of parallel file systems and key–value stores. We propose using key–value stores to optimize overall Input/Output (I/O) performance, especially for workloads that parallel file systems cannot handle well, such as the cases with intense data synchronization or heavy metadata operations. We conducted experiments with several synthetic benchmarks, an I/O benchmark, and a real application. We modeled the performance of these two systems using collected data from our experiments, and we provide a predictive method to identify which system offers better I/O performance given a specific workload. The results show that we can optimize the I/O performance in HPC systems by utilizing key–value stores.},
  booktitle={IJHPCA'17: The International Journal of High Performance Computing Applications},
  title={Rethinking key--value store for parallel i/o optimization},
  year={2017},
  month={},
  publisher={SAGE Publications Sage UK: London, England},
  volume={31},
  number={4},
  pages={335--356},
  keywords={},
  doi={10.1177/109434201667},
  url={https://journals.sagepub.com/doi/abs/10.1177/1094342016677084},
  html={https://journals.sagepub.com/doi/abs/10.1177/1094342016677084},
  pdf={kvfs.pdf},
  google_scholar_id={eQOLeE2rZwMC},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{kougkas2018hermes,
  abbr={hermes},
  author={Kougkas, Anthony and Devarajan, Hariharan and Sun, Xian-He},
  abstract={Modern High-Performance Computing (HPC) systems are adding extra layers to the memory and storage hierarchy named deep memory and storage hierarchy (DMSH), to increase I/O performance. New hardware technologies, such as NVMe and SSD, have been introduced in burst buffer installations to reduce the pressure for external storage and boost the burstiness of modern I/O systems. The DMSH has demonstrated its strength and potential in practice. However, each layer of DMSH is an independent heterogeneous system and data movement among more layers is significantly more complex even without considering heterogeneity. How to efficiently utilize the DMSH is a subject of research facing the HPC community. In this paper, we present the design and implementation of Hermes: a new, heterogeneous-aware, multi-tiered, dynamic, and distributed I/O buffering system. Hermes enables, manages, supervises, and, in some sense, extends I/O buffering to fully integrate into the DMSH. We introduce three novel data placement policies to efficiently utilize all layers and we present three novel techniques to perform memory, metadata, and communication management in hierarchical buffering systems. Our evaluation shows that, in addition to automatic data movement through the hierarchy, Hermes can significantly accelerate I/O and outperforms by more than 2x state-of-the-art buffering platforms.},
  booktitle={HPDC'18: Proceedings of the 27th International Symposium on High-Performance Parallel and Distributed Computing},
  title={Hermes: a heterogeneous-aware multi-tiered distributed I/O buffering system},
  year={2018},
  month={June},
  publisher={ACM},
  volume={},
  number={},
  pages={219--230},
  keywords={},
  doi={10.1145/3208040.3208059},
  url={https://dl.acm.org/doi/abs/10.1145/3208040.3208059},
  html={https://dl.acm.org/doi/abs/10.1145/3208040.3208059},
  pdf={hermes.pdf},
  google_scholar_id={hqOjcs7Dif8C},
  additional_info={},
  bibtex_show={true},
  selected={true}
}

@INPROCEEDINGS{kougkas2018iris,
  abbr={ics18},
  author={Kougkas, Anthony and Devarajan, Hariharan and Sun, Xian-He},
  abstract={There is an ocean of available storage solutions in modern high-performance and distributed systems. These solutions consist of Parallel File Systems (PFS) for the more traditional high-performance computing (HPC) systems and of Object Stores for emerging cloud environments. More of ten than not, these storage solutions are tied to specific APIs and data models and thus, bind developers, applications, and entire computing facilities to using certain interfaces. Each storage system is designed and optimized for certain applications but does not perform well for others. Furthermore, modern applications have become more and more complex consisting of a collection of phases with different computation and I/O requirements. In this paper, we propose a unified storage access system, called IRIS (i.e., I/O Redirection via Integrated Storage). IRIS enables unified data access and seamlessly bridges the semantic gap between file systems and object stores. With IRIS, emerging High-Performance Data Analytics software has capable and diverse I/O support. IRIS can bring us closer to the convergence of HPC and Cloud environments by combining the best storage subsystems from both worlds. Experimental results show that IRIS can grant more than 7x improvement in performance than existing solutions.},
  booktitle={ICS'18: Proceedings of the 2018 International Conference on Supercomputing},
  title={Iris: I/o redirection via integrated storage},
  year={2018},
  month={June},
  publisher={},
  volume={},
  number={},
  pages={33--42},
  keywords={},
  doi={10.1145/3205289.3205322},
  url={https://dl.acm.org/doi/abs/10.1145/3205289.3205322},
  html={https://dl.acm.org/doi/abs/10.1145/3205289.3205322},
  pdf={iris.pdf},
  google_scholar_id={8k81kl-MbHgC},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{kougkas2018harmonia,
  abbr={cluster18},
  author={Kougkas, Anthony and Devarajan, Hariharan and Sun, Xian-He and Lofstead, Jay},
  abstract={Modern HPC systems employ burst buffer installations to reduce the peak I/O requirements for external storage and deal with the burstiness of I/O in modern scientific applications. These I/O buffering resources are shared between multiple applications that run concurrently. This leads to severe performance degradation due to contention, a phenomenon called cross-application I/O interference. In this paper, we first explore the negative effects of interference at the burst buffer layer and we present two new metrics that can quantitatively describe the slowdown applications experience due to interference. We introduce Harmonia, a new dynamic I/O scheduler that is aware of interference, adapts to the underlying system, implements a new 2-way decision-making process and employs several scheduling policies to maximize the system efficiency and applications' performance. Our evaluation shows that Harmonia, through better I/O scheduling, can outperform by 3x existing state-of-the-art buffering management solutions and can lead to better resource utilization.},
  booktitle={CLUSTER'18: Proceedings of the International Conference on Cluster Computing},
  title={Harmonia: An interference-aware dynamic I/O scheduler for shared non-volatile burst buffers},
  year={2018},
  month={September},
  publisher={IEEE},
  volume={},
  number={},
  pages={290--301},
  keywords={Burst Buffers, I/O Scheduling, I/O Interference, Multi Tenancy, I/O Policies, Shared Buffers},
  doi={},
  url={https://ieeexplore.ieee.org/abstract/document/8514889},
  html={https://ieeexplore.ieee.org/abstract/document/8514889},
  pdf={harmonia.pdf},
  google_scholar_id={3fE2CSJIrl8C},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{devarajan2018vidya,
  abbr={hipc18},
  author={Devarajan, Hariharan and Kougkas, Anthony and Challa, Prajwal and Sun, Xian-He},
  abstract={Understanding, characterizing and tuning scientific applications' I/O behavior is an increasingly complicated process in HPC systems. Existing tools use either offline profiling or online analysis to get insights into the applications' I/O patterns. However, there is lack of a clear formula to characterize applications' I/O. Moreover, these tools are application specific and do not account for multi-tenant systems. This paper presents Vidya, an I/O profiling framework which can predict application's I/O intensity using a new formula called Code-Block I/O Characterization (CIOC). Using CIOC, developers and system architects can tune an application's I/O behavior and better match the underlying storage system to maximize performance. Evaluation results show that Vidya can predict an application's I/O intensity with a variance of 0.05%. Vidya can profile applications with a high accuracy of 98% while reducing profiling time by 9x. We further show how Vidya can optimize an application's I/O time by 3.7x.},
  booktitle={HiPC'18: Proceedings of the 25th International Conference on High Performance Computing},
  title={Vidya: Performing code-block I/O characterization for data access optimization},
  year={2018},
  month={December},
  publisher={IEEE},
  volume={},
  number={},
  pages={255--264},
  keywords={I/O Systems, I/O profiling, I/O optimization, Source Code Characterization, High Performance Computing Systems},
  doi={10.1109/HiPC.2018.00036},
  url={https://ieeexplore.ieee.org/abstract/document/8638067},
  html={https://ieeexplore.ieee.org/abstract/document/8638067},
  pdf={vidya.pdf},
  google_scholar_id={Zph67rFs4hoC},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{devarajan2019intelligent,
  abbr={ccgrid19},
  author={Devarajan, Hariharan and Kougkas, Anthony and Sun, Xian-He},
  abstract={The data explosion phenomenon in modern applications causes tremendous stress on storage systems. Developers use data compression, a size-reduction technique, to address this issue. However, each compression library exhibits different strengths and weaknesses when considering the input data type and format. We present Ares, an intelligent, adaptive, and flexible compression framework which can dynamically choose a compression library for a given input data based on the type of the workload and provides an appropriate infrastructure to users to fine-tune the chosen library. Ares is a modular framework which unifies several compression libraries while allowing the addition of more compression libraries by the user. Ares is a unified compression engine that abstracts the complexity of using different compression libraries for each workload. Evaluation results show that under real-world applications, from both scientific and Cloud domains, Ares performed 2-6x faster than competitive solutions with a low cost of additional data analysis (i.e., overheads around 10%) and up to 10x faster against a baseline of no compression at all.},
  booktitle={CCGRID'18: Proceedings of the 19th International Symposium on Cluster, Cloud and Grid Computing},
  title={An intelligent, adaptive, and flexible data compression framework},
  year={2019},
  month={May},
  publisher={IEEE},
  volume={},
  number={},
  pages={82--91},
  keywords={Smart Intelligent Compression Framework, Data Compression Benchmark, Data Format, I/O Priority, Adaptive Flexible Data Compression},
  doi={10.1109/CCGRID.2019.00019},
  url={https://ieeexplore.ieee.org/abstract/document/8752926},
  html={https://ieeexplore.ieee.org/abstract/document/8752926},
  pdf={ares.pdf},
  google_scholar_id={_kc_bZDykSQC},
  additional_info={},
  bibtex_show={true},
  selected={}
}

@INPROCEEDINGS{kougkas2019labios,
  abbr={hpdc19},
  author={Kougkas, Anthony and Devarajan, Hariharan and Lofstead, Jay and Sun, Xian-He},
  abstract={In the era of data-intensive computing, large-scale applications, in both scientific and the BigData communities, demonstrate unique I/O requirements leading to a proliferation of different storage devices and software stacks, many of which have conflicting requirements. In this paper, we investigate how to support a wide variety of conflicting I/O workloads under a single storage system. We introduce the idea of a Label, a new data representation, and, we present LABIOS: a new, distributed, Label- based I/O system. LABIOS boosts I/O performance by up to 17x via asynchronous I/O, supports heterogeneous storage resources, offers storage elasticity, and promotes in-situ analytics via data provisioning. LABIOS demonstrates the effectiveness of storage bridging to support the convergence of HPC and BigData workloads on a single platform.},
  booktitle={HPDC'19: Proceedings of the 28th International Symposium on High-Performance Parallel and Distributed Computing.},
  title={Labios: A distributed label-based i/o system},
  year={2019},
  month={June},
  publisher={ACM},
  volume={},
  number={},
  pages={13--24},
  keywords={},
  doi={10.1145/3307681.3325405},
  url={https://dl.acm.org/doi/abs/10.1145/3307681.3325405},
  html={https://dl.acm.org/doi/abs/10.1145/3307681.3325405},
  pdf={labios.pdf},
  award={[Karsten Schwan Best Paper Award](https://www.hpdc.org/2019/awards/best-paper-award/) at HPDC'2019. Photo [here](/assets/img/labios_award.jpg)},
  award_name={Best Paper Award}, 
  google_scholar_id={ULOm3_A8WrAC},
  additional_info={║ **Best Paper Award** ║},
  bibtex_show={true},
  selected={true}
}

@INPROCEEDINGS{feng2019niobe,
  abbr={bigdata19},
  author={Feng, Kun and Devarajan, Hariharan and Kougkas, Anthony and Sun, Xian-He},
  abstract={In the age of data-driven computing, integrating High Performance Computing(HPC) and Big Data(BD) environments may be the key to increasing productivity and to driving scientific discovery forward. Scientific workflows consist of diverse applications (i.e., HPC simulations and BD analysis) each with distinct representations of data that introduce a semantic barrier between the two environments. To solve scientific problems at scale, accessing semantically different data from different storage resources is the biggest unsolved challenge. In this work, we aim to address a critical question: ”How can we exploit the existing resources and efficiently provide transparent access to data from/to both environments”. We propose iNtelligent I/O Bridging Engine(NIOBE), a new data integration framework that enables integrated data access for scientific workflows with asynchronous I/O and data aggregation. NIOBE performs the data integration using available I/O resources, in contrast to existing optimizations that ignore the I/O nodes present on the data path. In NIOBE, data access is optimized to consider both the ongoing production and the consumption of the data in the future. Experimental results show that with NIOBE, an integrated scientific workflow can be accelerated by up to 10x when compared to a no-integration baseline and by up to 133% compared to other state-of-the-art integration solutions.},
  booktitle={BigData'19: Proceedings of the International Conference on Big Data},
  title={NIOBE: An intelligent i/o bridging engine for complex and distributed workflows},
  year={2019},
  month={December},
  publisher={IEEE},
  volume={},
  number={},
  pages={493--502},
  keywords={Data aggregation, Data integration, Data models, I/O Optimization, I/O Acceleration, API Connectors, I/O Integration},
  doi={10.1109/BigData47090.2019.9006363},
  url={https://ieeexplore.ieee.org/abstract/document/9006363},
  html={https://ieeexplore.ieee.org/abstract/document/9006363},
  pdf={niobe.com},
  google_scholar_id={4DMP91E08xMC},
  additional_info={},
  bibtex_show={true},
  selected={}
}


@INPROCEEDINGS{kougkas2020acceleration,
  abbr={jcst20},
  author={Kougkas, Anthony and Devarajan, Hariharan and Sun, Xian-He},
  abstract={Modern High-Performance Computing (HPC) systems are adding extra layers to the memory and storage hierarchy, named deep memory and storage hierarchy (DMSH), to increase I/O performance. New hardware technologies, such as NVMe and SSD, have been introduced in burst buffer installations to reduce the pressure for external storage and boost the burstiness of modern I/O systems. The DMSH has demonstrated its strength and potential in practice. However, each layer of DMSH is an independent heterogeneous system and data movement among more layers is significantly more complex even without considering heterogeneity. How to efficiently utilize the DMSH is a subject of research facing the HPC community. Further, accessing data with a high-throughput and low-latency is more imperative than ever. Data prefetching is a well-known technique for hiding read latency by requesting data before it is needed to move it from a high-latency medium (e.g., disk) to a low-latency one (e.g., main memory). However, existing solutions do not consider the new deep memory and storage hierarchy and also suffer from under-utilization of prefetching resources and unnecessary evictions. Additionally, existing approaches implement a client-pull model where understanding the application's I/O behavior drives prefetching decisions. Moving towards exascale, where machines run multiple applications concurrently by accessing files in a workflow, a more data-centric approach resolves challenges such as cache pollution and redundancy. In this paper, we present the design and implementation of Hermes: a new, heterogeneous-aware, multi-tiered, dynamic, and distributed I/O buffering system. Hermes enables, manages, supervises, and, in some sense, extends I/O buffering to fully integrate into the DMSH. We introduce three novel data placement policies to efficiently utilize all layers and we present three novel techniques to perform memory, metadata, and communication management in hierarchical buffering systems. Additionally, we demonstrate the benefits of a truly hierarchical data prefetcher that adopts a server-push approach to data prefetching. Our evaluation shows that, in addition to automatic data movement through the hierarchy, Hermes can significantly accelerate I/O and outperforms by more than 2x state-of-the-art buffering platforms. Lastly, results show 10% to 35% performance gains over existing prefetchers and over 50% when compared to systems with no prefetching.},
  booktitle={JCST'20: International Journal of Computer Science and Technology},
  title={I/O Acceleration via Multi-Tiered Data Buffering and Prefetching},
  year={2020},
  month={January},
  publisher={Springer},
  volume={35},
  number={1},
  pages={92--120},
  keywords={I/O buffering, heterogeneous buffering, layered buffering, deep memory hierarchy, burst buffers, hierarchical data prefetching,data-centric architecture},
  doi={10.1007/s11390-020-9781-1},
  url={https://link.springer.com/article/10.1007/s11390-020-9781-1},
  html={https://link.springer.com/article/10.1007/s11390-020-9781-1},
  pdf={labios_jcst.pdf},
  google_scholar_id={Wp0gIr-vW9MC},
  additional_info={},
  bibtex_show={true},
  selected={}
}


@inproceedings{devarajan2020hfetch,
  title={Hfetch: Hierarchical data prefetching for scientific workflows in multi-tiered storage environments},
  author={Devarajan, Hariharan and Kougkas, Anthony and Sun, Xian-He},
  booktitle={2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS)},
  pages={62--72},
  year={2020},
  organization={IEEE}
}

@inproceedings{devarajan2020hcompress,
  title={Hcompress: Hierarchical data compression for multi-tiered storage environments},
  author={Devarajan, Hariharan and Kougkas, Anthony and Logan, Luke and Sun, Xian-He},
  booktitle={2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS)},
  pages={557--566},
  year={2020},
  organization={IEEE}
}

@article{kougkas2020bridging,
  title={Bridging Storage Semantics Using Data Labels and Asynchronous I/O},
  author={Kougkas, Anthony and Devarajan, Hariharan and Sun, Xian-He},
  journal={ACM Transactions on Storage (TOS)},
  volume={16},
  number={4},
  pages={1--34},
  year={2020},
  publisher={ACM New York, NY, USA}
}

@inproceedings{kougkas2020chronolog,
  title={ChronoLog: A Distributed Shared Tiered Log Store with Time-based Data Ordering},
  author={Kougkas, Anthony and Devarajan, Hariharan and Bateman, Keith and Cernuda, Jaime and Rajesh, Neeraj and Sun, Xian-He},
  booktitle={36th International Conference on Massive Storage Systems and Technology (MSST 2020)},
  year={2020}
}

@inproceedings{devarajan2020hcl,
  title={Hcl: Distributing parallel data structures in extreme scales},
  author={Devarajan, Hariharan and Kougkas, Anthony and Bateman, Keith and Sun, Xian-He},
  booktitle={2020 IEEE International Conference on Cluster Computing (CLUSTER)},
  pages={248--258},
  year={2020},
  organization={IEEE}
}


@inproceedings{devarajan2020hreplica,
  title={Hreplica: a dynamic data replication engine with adaptive compression for multi-tiered storage},
  author={Devarajan, Hariharan and Kougkas, Anthony and Sun, Xian-He},
  booktitle={2020 IEEE International Conference on Big Data (Big Data)},
  pages={256--265},
  year={2020},
  organization={IEEE}
}

@inproceedings{devarajan2021dlio,
  title={Dlio: A data-centric benchmark for scientific deep learning applications},
  author={Devarajan, Hariharan and Zheng, Huihuo and Kougkas, Anthony and Sun, Xian-He and Vishwanath, Venkatram},
  booktitle={2021 IEEE/ACM 21st International Symposium on Cluster, Cloud and Internet Computing (CCGrid)},
  pages={81--91},
  year={2021},
  organization={IEEE}
}

@inproceedings{rajesh2021apollo,
  title={Apollo: An ML-assisted real-time storage resource observer},
  author={Rajesh, Neeraj and Devarajan, Hariharan and Garcia, Jaime Cernuda and Bateman, Keith and Logan, Luke and Ye, Jie and Kougkas, Anthony and Sun, Xian-He},
  booktitle={Proceedings of the 30th International Symposium on High-Performance Parallel and Distributed Computing},
  pages={147--159},
  year={2021}
}


@inproceedings{logan2021pmemcpy,
  title={pMEMCPY: a simple, lightweight, and portable I/O library for storing data in persistent memory},
  author={Logan, Luke and Lofstead, Jay and Levy, Scott and Widener, Patrick and Sun, Xian-He and Kougkas, Anthony},
  booktitle={2021 IEEE International Conference on Cluster Computing (CLUSTER)},
  pages={664--670},
  year={2021},
  organization={IEEE}
}

@inproceedings{cernuda2021hflow,
  title={Hflow: A dynamic and elastic multi-layered i/o forwarder},
  author={Cernuda, Jaime and Devarajan, Hariharan and Logan, Luke and Bateman, Keith and Rajesh, Neeraj and Ye, Jie and Kougkas, Anthony and Sun, Xian-He},
  booktitle={2021 IEEE International Conference on Cluster Computing (CLUSTER)},
  pages={114--124},
  year={2021},
  organization={IEEE}
}


@inproceedings{devarajan2022stimulus,
  title={Stimulus: Accelerate Data Management for Scientific AI applications in HPC},
  author={Devarajan, Hariharan and Kougkas, Anthony and Zheng, Huihuo and Vishwanath, Venkatram and Sun, Xian-He},
  booktitle={2022 22nd IEEE International Symposium on Cluster, Cloud and Internet Computing (CCGrid)},
  pages={109--118},
  year={2022},
  organization={IEEE}
}

@inproceedings{logan2022labstor,
  title={LabStor: A modular and extensible platform for developing high-performance, customized I/O stacks in userspace},
  author={Logan, Luke and Garcia, Jaime Cernuda and Lofstead, Jay and Sun, Xian--He and Kougkas, Anthony},
  booktitle={SC22: International Conference for High Performance Computing, Networking, Storage and Analysis},
  pages={1--15},
  year={2022},
  organization={IEEE}
}


@inproceedings{bateman2022luxio,
  title={LuxIO: Intelligent Resource Provisioning and Auto-Configuration for Storage Services},
  author={Bateman, Keith and Rajesh, Neeraj and Garcia, Jaime Cernuda and Logan, Luke and Ye, Jie and Herbein, Stephen and Kougkas, Anthony and Sun, Xian-He},
  booktitle={2022 IEEE 29th International Conference on High Performance Computing, Data, and Analytics (HiPC)},
  pages={246--255},
  year={2022},
  organization={IEEE}
}

@inproceedings{logan2023evaluation,
  title={An Evaluation of DAOS for Simulation and Deep Learning HPC Workloads},
  author={Logan, Luke and Lofstead, Jay and Sun, Xian-He and Kougkas, Anthony},
  booktitle={Proceedings of the 3rd Workshop on Challenges and Opportunities of Efficient and Performant Storage Systems},
  pages={9--16},
  year={2023}
}


@inproceedings{lee2023data,
  title={Data Flow Lifecycles for Optimizing Workflow Coordination},
  author={Lee, Hyungro and Guo, Luanzheng and Tang, Meng and Firoz, Jesun and Tallent, Nathan and Kougkas, Anthony and Sun, Xian-He},
  booktitle={Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
  pages={1--15},
  year={2023}
}

@inproceedings{yildirim2023iomax,
  title={IOMax: Maximizing Out-of-Core I/O Analysis Performance on HPC Systems},
  author={Yildirim, Izzet and Devarajan, Hariharan and Kougkas, Anthony and Sun, Xian-He and Mohror, Kathryn},
  booktitle={Proceedings of the SC'23 Workshops of The International Conference on High Performance Computing, Network, Storage, and Analysis},
  pages={1209--1215},
  year={2023}
}
